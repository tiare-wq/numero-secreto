""" 'NÃºmero secreto' es un juego que consiste en ingresar dos nÃºmeros, un menor y uno mayor, que serÃ¡n el rango del nÃºmero secreto,
un nÃºmero random. Se considera que es una parte del rompecabezas de un juego de aventura mÃ¡s grande. El Nigromante no mata al jugador,
solo no le da el tesoro. """

import funciones
import os
import random
import time

# FunciÃ³n principal
def main():
    ruta = funciones.garantizar_ruta() # Crea carpeta 'datos' si no existe, sin lanzar error si ya existe

    ruta_jugadores = os.path.join(ruta, "jugadores.json")
    jugadores = funciones.cargar_archivos(ruta_jugadores)

    ruta_top = os.path.join(ruta, "top.json")
    top = funciones.cargar_archivos(ruta_top)
    

    while True:
        
        funciones.menu()

        while True:
            try:
                opcion = int(input("Elija una opciÃ³n: "))
                if opcion in range(1, 5):
                    break
                print("OpciÃ³n fuera de rango.\n")
            except ValueError:
                print("Debes ingresar valores numÃ©ricos.\n")

        print()
        if opcion == 1:
            print("ğŸ”® NUEVA PARTIDA\n")
            nombre = funciones.validar_nombre()
            jugador = funciones.ingresar_jugador(nombre, jugadores)

            # Solicita dos nÃºmeros, con un rango mÃ­nimo de 15. Se utiliza try/except para garantizar que sean nÃºmeros enteros
            while True:
                try:
                    num1 = int(input("Ingrese el primer nÃºmero (piÃ©nsalo bien...): "))
                    break
                except ValueError:
                    print("Â¿Y eso que es? Â¿Se come? No, solo se aceptan nÃºmeros.\n")
            while True:
                try:
                    num2 = int(input("Ingrese el segundo nÃºmero (debe ser MAYOR que el primero): "))

                    if num2 - num1 >= 15: # Comprueba el rango
                        break
                    print("Â¡Al menos 15 nÃºmeros mÃ¡s grande! El mago ya estÃ¡ poniendo caritas...\n")
                except ValueError:
                    print("Â¿Y eso que es? Â¿Se come? No, solo se aceptan nÃºmeros.\n")

            num_secreto = random.randint(num1, num2) # Genera el nÃºmero secreto

            print("Oh! Â¡Entraste a mi juego! Â¡Para obtener mi tesoro debes adivinar el nÃºmero secreto! Â¡Pero nadie me lo quitarÃ¡! Â¡JAJAJA!\n")
            time.sleep(1.5)
            print("ğŸ“¢ Â¡Recuerda que el nÃºmero secreto estÃ¡ entre el rango que diste!\n")

            resultado = funciones.minijuego(num_secreto)

            if resultado:
                time.sleep(1)
                print(f"Felicitaciones {jugador["Nombre"]}, has ganado el reto.\n")

            funciones.actualizar_resultados(jugador, resultado)
            # Valida si tiene las misma cantidad o mÃ¡s partidas ganadas que los jugadores del top
            validar_ranking = any(t["Partidas ganadas"] <= jugador["Partidas ganadas"] for t in top)
            if top and validar_ranking:
                funciones.actualizar_top(jugador, top)
            elif not top:
                jugador["Puesto"] = 1
                top.append(jugador)
                print("Jugador entrÃ³ en el TOP\n")
            
            continuar = "Â¿Deseas volver al menÃº principal? (s/n): "
            respuesta = funciones.validar_continuar(continuar)
            
            if respuesta == 'n':
                print()
                funciones.guardar_archivos(jugadores, top, ruta_jugadores, ruta_top) # Guardar archivos

                time.sleep(1)
                funciones.mostrar_todos_los_resultados(jugadores)
                break
            
            time.sleep(1)
            continue
        
        elif opcion == 2:
            if top:
                print("âœ¨ TOP 5\n")
                funciones.mostrar_top(top)
            else:
                print("AÃºn no hay ranking de jugadores\n")

        elif opcion == 3:
            borrar_archivos = "Â¿EstÃ¡s seguro(a) que deseas borrar los datos de todos los jugadores? (s/n): "
            respuesta = funciones.validar_continuar(borrar_archivos)

            # Eliminar archivos
            if respuesta == 's':
                funciones.eliminar_datos(jugadores, top)
            else:
                print()
        
        else:
            funciones.guardar_archivos(jugadores, top, ruta_jugadores, ruta_top) # Guardar archivos

            funciones.mostrar_todos_los_resultados(jugadores)
            time.sleep(1)

            print("Saliendo del programa...")
            time.sleep(1)
            break

        time.sleep(1)
        input("Presiona ENTER para continuar")

main()